DROP SCHEMA IF EXISTS Security
GO

CREATE SCHEMA Security
GO

DROP FUNCTION IF EXISTS Security.EntitlementCheck
GO

CREATE FUNCTION Security.EntitlementCheck(@ClientId AS INT) 
	RETURNS TABLE  
	WITH SCHEMABINDING  
AS  
	RETURN SELECT 1 AS Result
	WHERE @ClientId = SESSION_CONTEXT(N'cid') 
		--OR DATABASE_PRINCIPAL_ID() = DATABASE_PRINCIPAL_ID(N'Admin')
GO

DROP SECURITY POLICY IF EXISTS dbo.EntitlementPolicy
GO

CREATE SECURITY POLICY EntitlementPolicy  
ADD FILTER PREDICATE Security.EntitlementCheck(ClientId) ON dbo.Users
WITH (STATE = ON)
GO

ALTER SECURITY POLICY EntitlementPolicy WITH (STATE = ON)
ALTER SECURITY POLICY EntitlementPolicy WITH (STATE = OFF)
GO

SELECT * FROM Users
SELECT COUNT(1) FROM Users

BEGIN TRANSACTION 
--DELETE TOP (10) FROM Users WHERE ClientId = 3
UPDATE Users SET Password = 'HACK' WHERE ClientId = 1
ROLLBACK

EXEC sp_set_session_context @key='cid', @value=3

SELECT SESSION_CONTEXT(N'cid'); 


CREATE USER Admin WITHOUT LOGIN
GRANT SELECT, UPDATE, DELETE ON Users TO Admin
EXECUTE AS USER = 'Admin'
REVERT
DROP USER IF EXISTS Admin